/*----------------------------------------------------------------------------*/
/* Copyright (c) 2017-2018 FIRST. All Rights Reserved.                        */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package frc.robot;

import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.gradle file in the
 * project.
 */
public class Robot extends TimedRobot {
  // Creates the variables
  private static final String kDefaultAuto = "Default";
  private static final String kCustomAuto = "My Auto";
  private String m_autoSelected;
  private final SendableChooser<String> m_chooser = new SendableChooser<>();
  Compressor compressor;
  DoubleSolenoid fp, bp, hatch;
  Spark FLM, FRM, BLM, BRM;
  CameraServer cam0;
  Joystick Joy1, Joy2, Joy3;
  double left, right;
  Timer fpcooldown, bpcooldown, hatchcooldown;
  Timer fpcc, bpcc, hatchcc;

  @Override
  public void robotInit() {
    // Initialization
    m_chooser.setDefaultOption("Default Auto", kDefaultAuto);
    m_chooser.addOption("My Auto", kCustomAuto);
    SmartDashboard.putData("Auto choices", m_chooser);
    compressor = new Compressor();
    fp = new DoubleSolenoid(2, 3);
    bp = new DoubleSolenoid(4, 5);
    hatch = new DoubleSolenoid(0, 1);
    FLM = new Spark(0);
    FRM = new Spark(1);
    BLM = new Spark(2);
    BRM = new Spark(3);
    // Starts the camera
    CameraServer.getInstance().startAutomaticCapture();
    // Maps the joysticks
    Joy1 = new Joystick(0);
    Joy2 = new Joystick(1);
    Joy3 = new Joystick(2);
    // Setting up the cooldown timers for pneumatics
    fpcc.start();
    bpcc.start();
    hatchcc.start();
    fpcooldown.start();
    bpcooldown.start();
    hatchcooldown.start();
    fpcc.reset();
    bpcc.reset();
    hatchcc.reset();
    fpcooldown.reset();
    bpcooldown.reset();
    hatchcooldown.reset();

  }
  @Override
  public void robotPeriodic() {
  }
  @Override
  public void autonomousInit() {
    m_autoSelected = m_chooser.getSelected();
    System.out.println("Auto selected: " + m_autoSelected);
  }
  @Override
  public void autonomousPeriodic() {
    switch (m_autoSelected) {
    case kCustomAuto:
      break;
    case kDefaultAuto:
    default:
      break;
    }
  }
  @Override
  public void teleopPeriodic() {
    // Creates variables for the left and right stick input
    left = -Joy1.getRawAxis(1);
    right = Joy2.getRawAxis(1);

    // Turbo Button
    if (Joy1.getRawButtonPressed(1) || Joy2.getRawButtonPressed(1)) {
      FLM.setSpeed(left);
      FRM.setSpeed(right);
      BLM.setSpeed(left);
      BRM.setSpeed(right);
    } else {
      FLM.setSpeed(left / 2);
      FRM.setSpeed(right / 2);
      BLM.setSpeed(left / 2);
      BRM.setSpeed(right / 2);
    }

    // Front Piston
    if(Joy3.getRawButton(5) || Joy3.getRawButton(3)){
      if(fpcooldown.get() >= 0.5){
        fp.set(Value.kReverse);
        fpcooldown.stop();
        fpcooldown.reset();
        fpcc.reset();
      } else if(fpcc.get() > 0.5){
        fpcooldown.start();
        fp.set(Value.kForward);
      }
    }

    // Back Piston
    if(Joy3.getRawButton(6) || Joy3.getRawButton(4)){
      if(bpcooldown.get() >= 0.5){
        bp.set(Value.kReverse);
        bpcooldown.stop();
        bpcooldown.reset();
        bpcc.reset();
      } else if(bpcc.get() > 0.5){
        bpcooldown.start();
        bp.set(Value.kForward);
      }
    }

    // Hatch System
    if(Joy3.getRawButton(1)){
      if(hatchcooldown.get() >= 0.5){
        hatch.set(Value.kReverse);
        hatchcooldown.stop();
        hatchcooldown.reset();
        hatchcc.reset();
      } else if(hatchcc.get() > 0.5){
        hatchcooldown.start();
        hatch.set(Value.kForward);
      } 
     }
    }

  @Override
  public void testPeriodic() {
  }
}
