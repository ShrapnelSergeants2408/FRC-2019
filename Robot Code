/*----------------------------------------------------------------------------*/
/* Copyright (c) 2017-2018 FIRST. All Rights Reserved.                        */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package frc.robot;

import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Jaguar;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.gradle file in the
 * project.
 */
public class Robot extends TimedRobot {
  private static final String kDefaultAuto = "Default";
  private static final String kCustomAuto = "My Auto";
  private String m_autoSelected;
  private final SendableChooser<String> m_chooser = new SendableChooser<>();
  Compressor compressor;
  DoubleSolenoid piston1, piston2, hatch;
  Jaguar FLM, FRM, BLM, BRM;
  CameraServer cam0;
  Joystick Joy1, Joy2;
  double left, right;
  boolean pneum = false;
  boolean pneum2 = false;
  boolean pneum3 = false;

  /**
   * This function is run when the robot is first started up and should be used
   * for any initialization code.
   */
  @Override
  public void robotInit() {
    m_chooser.setDefaultOption("Default Auto", kDefaultAuto);
    m_chooser.addOption("My Auto", kCustomAuto);
    SmartDashboard.putData("Auto choices", m_chooser);
    compressor = new Compressor();
    piston1 = new DoubleSolenoid(2, 3);
    piston2 = new DoubleSolenoid(4, 5);
    hatch = new DoubleSolenoid(0, 1);
    FLM = new Jaguar(0);
    FRM = new Jaguar(1);
    BLM = new Jaguar(2);
    BRM = new Jaguar(3);
    CameraServer.getInstance().startAutomaticCapture();
    Joy1 = new Joystick(0);
    Joy2 = new Joystick(1);

  }

  /**
   * This function is called every robot packet, no matter the mode. Use this for
   * items like diagnostics that you want ran during disabled, autonomous,
   * teleoperated and test.
   *
   * <p>
   * This runs after the mode specific periodic functions, but before LiveWindow
   * and SmartDashboard integrated updating.
   */
  @Override
  public void robotPeriodic() {
  }

  /**
   * This autonomous (along with the chooser code above) shows how to select
   * between different autonomous modes using the dashboard. The sendable chooser
   * code works with the Java SmartDashboard. If you prefer the LabVIEW Dashboard,
   * remove all of the chooser code and uncomment the getString line to get the
   * auto name from the text box below the Gyro
   *
   * <p>
   * You can add additional auto modes by adding additional comparisons to the
   * switch structure below with additional strings. If using the SendableChooser
   * make sure to add them to the chooser code above as well.
   */
  @Override
  public void autonomousInit() {
    m_autoSelected = m_chooser.getSelected();
    // m_autoSelected = SmartDashboard.getString("Auto Selector", kDefaultAuto);
    System.out.println("Auto selected: " + m_autoSelected);
  }

  /**
   * This function is called periodically during autonomous.
   */
  @Override
  public void autonomousPeriodic() {
    switch (m_autoSelected) {
    case kCustomAuto:
      // Put custom auto code here
      break;
    case kDefaultAuto:
    default:
      // Put default auto code here
      break;
    }
  }

  /**
   * This function is called periodically during operator control.
   */
  @Override
  public void teleopPeriodic() {
    left = -Joy1.getRawAxis(1);
    right = Joy2.getRawAxis(1);
    // Turbo Button
    if (Joy1.getRawButtonPressed(2) || Joy2.getRawButtonPressed(2)) {
      FLM.setSpeed(left);
      FRM.setSpeed(right);
      BLM.setSpeed(left);
      BRM.setSpeed(right);
    } else {
      FLM.setSpeed(left / 2);
      FRM.setSpeed(right / 2);
      BLM.setSpeed(left / 2);
      BRM.setSpeed(right / 2);
    }
    // Hatch System
    if (Joy1.getRawButtonPressed(1) || Joy2.getRawButtonPressed(1) && pneum == false) {
      pneum = true;
    } else if (Joy1.getRawButtonPressed(1) || Joy2.getRawButtonPressed(1) && pneum == true) {
      pneum = false;
    }
    if (pneum) {
      hatch.set(Value.kForward);
    } else {
      hatch.set(Value.kReverse);
    }
    // Piston 1 System
    if (Joy1.getRawButtonPressed(5) || Joy2.getRawButtonPressed(5) && pneum2 == false) {
      pneum2 = true;
    } else if (Joy1.getRawButtonPressed(5) || Joy2.getRawButtonPressed(5) && pneum2 == true) {
      pneum2 = false;
    }
    if (pneum2) {
      piston1.set(Value.kForward);
    } else {
      piston1.set(Value.kReverse);
    }
    // Piston 2 System
    if (Joy1.getRawButtonPressed(6) || Joy2.getRawButtonPressed(6) && pneum3 == false) {
      pneum3 = true;
    } else if (Joy1.getRawButtonPressed(6) || Joy2.getRawButtonPressed(6) && pneum3 == true) {
      pneum3 = false;
    }
    if (pneum3) {
      piston2.set(Value.kForward);
    } else {
      piston2.set(Value.kReverse);
    }
  }

  /**
   * This function is called periodically during test mode.
   */
  @Override
  public void testPeriodic() {
  }
}
